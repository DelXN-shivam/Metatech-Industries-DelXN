'use client';

import Image from 'next/image';
import React, { useState, useEffect } from 'react';
import { IoIosArrowForward } from 'react-icons/io';
import { FaTools, FaChalkboardTeacher, FaInfoCircle, FaTrophy , FaEnvelope, FaUserCircle } from 'react-icons/fa';
import { motion, AnimatePresence } from 'framer-motion';
import { useRouter, useParams, usePathname } from 'next/navigation';
import Link from 'next/link';
import { mainCategories } from '@/app/data/categories';

const Header = () => {
  const [productsDropdown, setProductsDropdown] = useState(false);
  const [activeCategory, setActiveCategory] = useState(null);
  const [activeSubCategory, setActiveSubCategory] = useState(null);
  const [scrollProgress, setScrollProgress] = useState(0);
  
  const router = useRouter();
  const pathname = usePathname();
  const { categoryId, subCategoryId } = useParams();
  
  // Enhanced scroll detection for smoother animation
  useEffect(() => {
    const handleScroll = () => {
      // Calculate scroll progress as a percentage (0 to 1) with a maximum threshold of 40px
      const progress = Math.min(window.scrollY / 40, 1);
      setScrollProgress(progress);
    };
    
    // Add passive: true for better performance
    window.addEventListener('scroll', handleScroll, { passive: true });
    return () => window.removeEventListener('scroll', handleScroll);
  }, []);

  // Set active states based on current path
  useEffect(() => {
    if (categoryId) {
      setActiveCategory(categoryId);
    }
    if (subCategoryId) {
      setActiveSubCategory(subCategoryId);
    }
  }, [categoryId, subCategoryId, pathname]);

  // Consumables data
  const consumables = [
    {
      title: 'Cutting Machine Consumables',
      slug: 'cutting-machine-consumables',
      icon: '🔪',
      items: [
        { name: 'Diamond Cutting Blades', slug: 'diamond-cutting-blades' },
        { name: 'Abrasive Cutting Wheels', slug: 'abrasive-cutting-wheels' },
        { name: 'Precision Wafering Blades', slug: 'precision-wafering-blades' },
        { name: 'Resin-Bonded Abrasive Blades', slug: 'resin-bonded-abrasive-blades' },
        { name: 'Cooling Lubricants', slug: 'cooling-lubricants' },
      ],
    },
    {
      title: 'Grinding Machine Consumables',
      slug: 'grinding-machine-consumables',
      icon: '⚙️',
      items: [
        { name: 'Grinding Wheels', slug: 'grinding-wheels' },
        { name: 'Silicon Carbide Grinding Papers', slug: 'silicon-carbide-grinding-papers' },
        { name: 'Electroplated Diamond Discs', slug: 'electroplated-diamond-discs' },
        { name: 'Grinding Lubricants', slug: 'grinding-lubricants' },
        { name: 'Abrasive Belts', slug: 'abrasive-belts' },
      ],
    },
  ];

  // Calculate interpolated styles based on scroll progress
  const headerBgColor = scrollProgress > 0.99 ? 'white' : 'rgba(224, 242, 300, 1)';
  const headerPadding = 16 - (scrollProgress * 8); // 16px (py-4) to 8px (py-2)
  const shadowOpacity = scrollProgress * 0.1;

  return (
    <header 
      style={{
        '--header-bg': headerBgColor,
        '--header-padding': `${headerPadding}px`,
        '--header-shadow': `0 4px 6px rgba(0, 0, 0, ${shadowOpacity})`,
        transition: 'all 0.4s cubic-bezier(0.16, 1, 0.3, 1)',
      }}
      className="sticky top-0 z-50 shadow-lg"
    >
      <div 
        style={{ 
          background: 'var(--header-bg)',
          paddingTop: 'var(--header-padding)',
          paddingBottom: 'var(--header-padding)',
          boxShadow: 'var(--header-shadow)',
        }}
        className="w-full"
      >
        <div className="container mx-auto flex items-center justify-between px-4">
          {/* Desktop Navigation */}
          <div className="hidden md:flex items-center justify-center flex-1 ml-10">
            <nav className="flex items-center">
              <ul className="flex items-center space-x-1">
                {/* Products Mega Menu - Second Position */}
                <li className="relative">
                  <button
                    className={`flex items-center gap-2 px-4 py-2 rounded-lg text-[15px] font-medium transition-all duration-200 ${
                      productsDropdown
                        ? scrollProgress > 0.5 
                          ? 'text-sky-600 bg-sky-50' 
                          : 'text-sky-700 bg-white' 
                        : scrollProgress > 0.5 
                          ? 'text-gray-700 hover:text-sky-600 hover:bg-sky-50' 
                          : 'text-sky-800 hover:text-sky-900 hover:bg-white/80'
                    }`}
                    onMouseEnter={() => setProductsDropdown(true)}
                    onClick={() => setProductsDropdown(!productsDropdown)}
                    aria-expanded={productsDropdown}
                  >
                    <FaTools className="hidden sm:inline-block" />
                    Products
                    <svg 
                      className={`w-4 h-4 transition-transform duration-200 ${productsDropdown ? 'rotate-180' : ''}`} 
                      fill="none" 
                      stroke="currentColor" 
                      viewBox="0 0 24 24"
                    >
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                    </svg>
                  </button>

                  {/* Mega Menu Dropdown */}
                  <div 
                    className="fixed left-0 w-full mt-2"
                    onMouseEnter={() => setProductsDropdown(true)}
                    onMouseLeave={() => setProductsDropdown(false)}
                  >
                    <AnimatePresence>
                      {productsDropdown && (
                        <motion.div
                          initial={{ opacity: 0, y: -10 }}
                          animate={{ opacity: 1, y: 0 }}
                          exit={{ opacity: 0, y: -10 }}
                          transition={{ duration: 0.2 }}
                          className="container mx-auto bg-white backdrop-blur-lg bg-opacity-95 rounded-xl shadow-lg border border-sky-100"
                        >
                          <div className="flex p-6 gap-6">
                            {/* Categories and Consumables Side by Side */}
                            <div className="w-full">
                            <div className="grid grid-cols-[1.5fr_0.5fr] gap-8">
                                {/* Product Categories - Left Side */}
                                <div>
                                  <div className="flex items-center gap-3 mb-4">
                                    <div className="w-10 h-10 bg-sky-500 rounded-lg flex items-center justify-center text-white">
                                      <FaTools className="text-lg" />
                                    </div>
                                    <h3 className="text-xl font-bold text-gray-800">Product Categories</h3>
                                  </div>
                                  
                                  <div className="max-h-[65vh] overflow-y-auto pr-2">
                                    <div className="grid grid-cols-3 gap-x-4 gap-y-2">
                                      {mainCategories && mainCategories.length > 0 ? mainCategories.map((mainCat, idx) => (
                                        <div key={mainCat.mainCategory} className="mb-4">
                                          <div className="font-semibold text-sky-700 mb-2">{mainCat.mainCategory}</div>
                                          {mainCat.categories && mainCat.categories.map((category) => (
                                            <div key={category.slug} className="mb-2">
                                              <Link
                                                href={`/categories/${category.slug}`}
                                                onClick={() => {
                                                  setActiveCategory(category.slug);
                                                  setActiveSubCategory(null);
                                                  setProductsDropdown(false);
                                                }}
                                                className={`flex items-center gap-3 py-2 px-3 rounded-lg transition-all duration-200 ${
                                                  activeCategory === category.slug
                                                    ? 'text-sky-700 font-medium bg-sky-50'
                                                    : 'text-gray-700 hover:text-sky-600 hover:bg-sky-50/50'
                                                }`}
                                              >
                                                <span className={`w-1.5 h-1.5 rounded-full ${
                                                  activeCategory === category.slug 
                                                    ? 'bg-sky-500' 
                                                    : 'bg-gray-400'
                                                }`} />
                                                {category.name}
                                              </Link>
                                              <div className="ml-6 mt-1 space-y-1">
                                                {category.subCategories && category.subCategories.length > 0 && category.subCategories.map((subCategory) => (
                                                  <Link
                                                    key={subCategory.id}
                                                    href={`/categories/${category.slug}/${subCategory.id}`}
                                                    onClick={() => {
                                                      setActiveCategory(category.slug);
                                                      setActiveSubCategory(subCategory.id);
                                                      setProductsDropdown(false);
                                                    }}
                                                    className={`block px-3 py-2 rounded-md text-sm transition-all duration-200 ${
                                                      activeCategory === category.slug && activeSubCategory === subCategory.id
                                                        ? 'text-sky-700 font-medium bg-sky-100'
                                                        : 'text-gray-600 hover:text-sky-600 hover:bg-sky-50'
                                                    }`}
                                                  >
                                                    <div className="flex items-center gap-2">
                                                      <span className={`w-1 h-1 rounded-full ${
                                                        activeCategory === category.slug && activeSubCategory === subCategory.id
                                                          ? 'bg-sky-500'
                                                          : 'bg-gray-300'
                                                      }`} />
                                                      {subCategory.name}
                                                    </div>
                                                  </Link>
                                                ))}
                                              </div>
                                            </div>
                                          ))}
                                        </div>
                                      )) : (
                                        <div className="text-gray-500 py-2">No categories available</div>
                                      )}
                                    </div>
                                  </div>
                                </div>
                                
                                {/* Consumables Section - Right Side */}
                                <div>
                                  <div className="flex items-center gap-3 mb-4">
                                    <div className="w-10 h-10 bg-green-400 rounded-lg flex items-center justify-center text-white">
                                      <span className="text-lg">⚙️</span>
                                    </div>
                                    <h3 className="text-xl font-bold text-gray-800 ">Consumables</h3>
                                  </div>
                                  
                                  <div className="max-h-[65vh] overflow-y-auto pr-2">
                                    <div className="grid grid-cols-1 gap-x-4 gap-y-2">
                                      {consumables.map((consumable, index) => (
                                        <div key={consumable.slug} className="mb-4">
                                          <Link
                                            href={`/consumables/${consumable.slug}`}
                                            onClick={() => {
                                              setActiveCategory(consumable.slug);
                                              setActiveSubCategory(null);
                                              setProductsDropdown(false);
                                            }}
                                            className={`flex items-center gap-3 py-2 px-3 rounded-lg transition-all duration-200 ${
                                              activeCategory === consumable.slug
                                                ? 'text-sky-700 font-medium bg-sky-50'
                                                : 'text-gray-700 hover:text-sky-600 hover:bg-sky-50/50'
                                            }`}
                                          >
                                            <span className="text-base">{consumable.icon}</span>
                                            {consumable.title}
                                          </Link>
                                          
                                          <div className="ml-6 mt-2 space-y-2">
                                            {consumable.items.map((item) => (
                                              <Link
                                                key={item.slug}
                                                href={`/consumables/${consumable.slug}/${item.slug}`}
                                                onClick={() => {
                                                  setActiveCategory(consumable.slug);
                                                  setActiveSubCategory(item.slug);
                                                  setProductsDropdown(false);
                                                }}
                                                className={`block px-3 py-2 rounded-md text-sm transition-all duration-200 ${
                                                  activeCategory === consumable.slug && activeSubCategory === item.slug
                                                    ? 'text-sky-700 font-medium bg-sky-100'
                                                    : 'text-gray-600 hover:text-sky-600 hover:bg-sky-50'
                                                }`}
                                              >
                                                <div className="flex items-center gap-2">
                                                  <span className={`w-1 h-1 rounded-full ${
                                                    activeCategory === consumable.slug && activeSubCategory === item.slug
                                                      ? 'bg-sky-500'
                                                      : 'bg-gray-300'
                                                  }`} />
                                                  {item.name}
                                                </div>
                                              </Link>
                                            ))}
                                          </div>
                                        </div>
                                      ))}
                                    </div>
                                  </div>
                                </div>
                              </div>
                            </div>
                          </div>
                        </motion.div>
                      )}
                    </AnimatePresence>
                  </div>
                </li>
              </ul>
            </nav>
          </div>
        </div>
      </div>
    </header>
  );
};

export default Header;